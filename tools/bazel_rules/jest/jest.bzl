"Shows how you might create a macro for the autogeneratd Jest rule"

load("@npm//@bazel/typescript:index.bzl", "ts_library")
load("@npm//jest-cli:index.bzl", "jest", _jest_test = "jest_test")

def jest_test(name, srcs, tsconfig, snapshots = [], jest_config = None, deps = [], **kwargs):
    "A macro around the autogenerated jest_test rule"

    ts_library(
        name = "%s_compile" % name,
        srcs = srcs,
        devmode_module = "commonjs",
        tsconfig = tsconfig,
        deps = deps + [
            "@npm//@types/jest",
            "@npm//@types/node",
        ],
    )

    templated_args = [
        "--no-cache",
        "--no-watchman",
        "--ci",
        "--colors",
    ]

    # add srcs to use rootpath to get the files
    data = deps + srcs + ["%s_compile" % name]

    if jest_config:
        data.append(jest_config)
        templated_args.extend(["--config", "$(rootpath %s)" % jest_config])

    for src in srcs:
        templated_args.extend(["--runTestsByPath", "$$(echo $(rootpath %s) | sed \"s/ts/js/\")" % src])

    _jest_test(
        name = name,
        data = data,
        templated_args = templated_args,
        **kwargs
    )

    # This rule is used specifically to update snapshots via `bazel run`
    jest(
        name = "%s.update" % name,
        data = data,
        templated_args = templated_args + ["-u"],
        **kwargs
    )
